/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GenerateMarkdownPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/views/generate-markdown.ts
var import_obsidian4 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
var fixSpaceInName = (name) => {
  return name.replace(/[\u00A0\u1680\u180E\u2000-\u200B\u202F\u205F\u3000\uFEFF]/, " ").trim();
};
var getNoteByName = async (app2, path) => {
  const file = app2.vault.getAbstractFileByPath(path);
  if (!(file instanceof import_obsidian.TFile))
    return "";
  return await app2.vault.cachedRead(file);
};

// src/views/generate-slides-markdown.ts
var SlidesMarkdown = class {
  constructor(slides, title, hasTitleSlide, hasLastSlide) {
    this.slides = [];
    this.slideshow = "";
    this.slides = slides;
    this.slideshow += this.createProperties();
    if (hasTitleSlide)
      this.slideshow += this.createTitleSlide(title);
    slides.forEach((slide) => {
      if (slide.type === "basic")
        this.slideshow += this.createBasicSlide(slide.link.name);
      else if (slide.type === "split")
        this.slideshow += this.createSplitSlide(slide.link.name);
    });
    if (hasLastSlide)
      this.slideshow += this.createLastSlide();
    return this;
  }
  createProperties() {
    return `---
theme: consult
height: 540
margin: 0
maxScale: 4
---

`;
  }
  createTitleSlide(title) {
    return `
<!-- slide template="[[tpl-con-title]]" -->

## ${title}
::: block
#### add author here
:::

`;
  }
  createLastSlide() {
    return `
---
<!-- slide template="[[tpl-con-splash]]" -->

# **Thank you for your attention**

`;
  }
  createBasicSlide(name) {
    return `
---
<!-- slide template="[[tpl-con-default-box]]" -->

::: title
### _**${name}**_
:::

::: block
-
-
-
:::

`;
  }
  createSplitSlide(name) {
    return `
---
<!-- slide template="[[tpl-con-2-1-box]]" -->

::: title
### _**${name}**_
:::

::: left
**text in left box**
- lorem ipsum
-
-
:::

::: right
**text in right box**
- lorem ipsum
-
-
:::

`;
  }
};

// src/components/Button.ts
var Button = class {
  constructor(element, text, onClick, args) {
    this.btn = element.createEl("button", { text, ...args });
    this.btn.onclick = () => {
      onClick(this);
    };
    return this;
  }
};

// src/components/Link.ts
var BaseLink = class {
  constructor(context, element, name) {
    this.context = context;
    this.element = element;
    this.name = name;
    this.render();
  }
  render() {
    const hrefTitle = this.element.createEl("a", { text: this.name, cls: "cont__title" });
    hrefTitle.onclick = () => {
      this.context.workspace.openLinkText(this.name, "");
    };
  }
};
var Link = class {
  constructor(context, element, link, renderNow = true) {
    this.toggledState = false;
    this.link = link;
    this.context = context;
    this.element = element;
    if (renderNow)
      this.render(false);
    return this;
  }
  render(state) {
    this.a = this.element.createEl("a", { text: this.link.name, cls: "link" });
    !this.link.exists && this.a.addClass("cont__link-not-exist");
    this.link.inline && this.a.addClass("inline");
    this.a.onclick = () => {
      this.context.workspace.openLinkText(this.link.name, "");
      !this.link.exists && this.a.removeClass("cont__link-not-exist");
    };
    this.toggle(state);
  }
  toggle(state) {
    if (state)
      this.a.removeClass("strikethrough");
    else
      this.a.addClass("strikethrough");
  }
};

// src/components/SaveModal.ts
var import_obsidian2 = require("obsidian");
var SaveModal = class extends import_obsidian2.Modal {
  constructor(app2, onSubmit) {
    super(app2);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Save as" });
    new import_obsidian2.Setting(contentEl).setName("File name: ").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Generate markdown note").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/components/TreeMenu.ts
function flattenChildren(link, children) {
  if ("children" in link) {
    const childrenLinkNames = link.children.map((l) => l.name);
    children.push(...childrenLinkNames);
    link.children.forEach((l) => {
      flattenChildren(l, children);
    });
  }
  return children;
}
var TreeMenu = class {
  constructor(app2, structure, linksTree, event) {
    this.ignoredLinks = [];
    this.linksTree = [];
    this.app = app2;
    let menu = structure.createEl("div", { cls: "tree-menu" });
    this.UL = menu.createEl("ul");
    this.linksTree = linksTree;
    this.render(this.linksTree, this.UL, [], event);
  }
  render(links, menuEl, childrenLinks, event) {
    if (!childrenLinks)
      childrenLinks = [];
    links.forEach((link) => {
      const li = menuEl.createEl("li");
      const linkEl = new Link(this.app, li, link, false);
      let state = !childrenLinks.includes(linkEl.link.name);
      if (!link.exists)
        state = false;
      new Checkbox(li, state, link.exists, () => {
        const ignoredChildren = [linkEl.link.name, ...flattenChildren(linkEl.link, [])];
        if (state == false) {
          childrenLinks = childrenLinks.filter((cl) => !ignoredChildren.includes(cl));
        } else {
          childrenLinks.push(...ignoredChildren);
          childrenLinks = [...new Set(childrenLinks)];
        }
        this.ignoredLinks = childrenLinks;
        this.UL.empty();
        this.render(this.linksTree, this.UL, childrenLinks, event);
      });
      linkEl.render(state);
      if ("children" in link) {
        const ul = li.createEl("ul");
        this.render(link.children, ul, childrenLinks, event);
      }
    });
    return event(this.ignoredLinks);
  }
};

// src/components/Checkbox.ts
var Checkbox = class {
  constructor(element, state, exists, onClick) {
    this.cb = element.createEl("input", {
      type: "checkbox",
      cls: "checkbox-btn"
    });
    this.cb.checked = state;
    if (!exists) {
      this.cb.disabled = true;
      this.cb.checked = false;
      this.cb.addClass("checkbox-btn-disabled");
    }
    this.cb.onclick = () => {
      onClick(this);
    };
    return this;
  }
};

// src/components/SlidesModal.ts
var import_obsidian3 = require("obsidian");
var SlidesModal = class extends import_obsidian3.Modal {
  constructor(app2, links, ignoredLinks, onSubmit) {
    super(app2);
    this.flattenedLinks = [];
    this.maxDepth = 1;
    this.titleSlide = false;
    this.lastSlide = false;
    this.links = links;
    this.ignoredLinks = ignoredLinks;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h1", { text: "Slideshow" });
    this.flattenLinks(this.links);
    const settingsEl = contentEl.createEl("div");
    const depthStr = (depth) => `Slides depth: ${depth}`;
    this.depth = this.maxDepth;
    contentEl.createEl("div", { text: "Include: " });
    const titleSlideEl = contentEl.createEl("div");
    new Checkbox(titleSlideEl, this.titleSlide, true, () => {
      this.titleSlide = !this.titleSlide;
      this.render();
    });
    titleSlideEl.createEl("span", { text: "title slide" });
    const lastSlideEl = contentEl.createEl("div");
    new Checkbox(lastSlideEl, this.lastSlide, true, () => {
      this.lastSlide = !this.lastSlide;
      this.render();
    });
    lastSlideEl.createEl("span", { text: "last slide" });
    this.linksEl = contentEl.createEl("div");
    new import_obsidian3.Setting(settingsEl).setName(depthStr(this.maxDepth)).setDesc("Set depth of preview content to create slides from.").addSlider((slider) => slider.setValue(this.maxDepth).setLimits(1, this.maxDepth, 1).onChange(async (value) => {
      const depthEl = settingsEl.children[0].children[0].children[0];
      depthEl.empty();
      depthEl.createEl("div", { text: depthStr(value) });
      this.depth = value;
      slider.showTooltip();
      this.render();
    }));
    this.render();
    new import_obsidian3.ButtonComponent(contentEl).setButtonText("Generate").onClick(() => {
      this.onSubmit(this.slides, this.titleSlide, this.lastSlide);
      this.close();
    });
  }
  flattenLinks(links) {
    links.forEach((link) => {
      if (this.ignoredLinks.includes(link.name))
        return;
      if (link.level && this.maxDepth <= link.level)
        this.maxDepth = link.level;
      this.flattenedLinks.push(link);
      if ("children" in link && link.level) {
        this.flattenLinks(link.children);
      }
    });
  }
  render() {
    this.linksEl.empty();
    const depthLinks = this.flattenedLinks.filter((link) => link.level && link.level <= this.depth);
    this.slides = depthLinks.map((link) => ({ link, type: "basic" }));
    if (this.titleSlide) {
      const slide = this.linksEl.createEl("div", { cls: "slide-row" });
      slide.createEl("span", { text: "1. Title slide" });
      const dropdownEl = slide.createEl("span", { cls: "row-right" });
      new import_obsidian3.DropdownComponent(dropdownEl).setDisabled(true).addOption("title", "title");
    }
    depthLinks.forEach((link) => {
      const slide = this.linksEl.createEl("div", { cls: "slide-row" });
      slide.createEl("span", { text: `${link.level}: ${link.name}` });
      const dropdownEl = slide.createEl("span", { cls: "row-right" });
      new import_obsidian3.DropdownComponent(dropdownEl).addOption("basic", "basic").addOption("split", "split").addOption("image", "image").onChange((value) => {
        const index = this.slides.findIndex(({ link: slideLink }) => slideLink.name === link.name);
        this.slides[index]["type"] = value;
      });
    });
    if (this.lastSlide) {
      const slide = this.linksEl.createEl("div", { cls: "slide-row" });
      slide.createEl("span", { text: "1. Last slide" });
      const dropdownEl = slide.createEl("span", { cls: "row-right" });
      new import_obsidian3.DropdownComponent(dropdownEl).setDisabled(true).addOption("last", "last");
    }
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/views/generate-markdown.ts
var VIEW_CONTENT_COMPOSE_NOTES = "view-generate-markdown";
var _GenerateMarkdown = class extends import_obsidian4.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.linksTree = [];
    this.loadedFiles = [];
    this.maxLevel = 0;
    this.processed = [];
    this.mainNameLinks = [];
    this.markdown = "";
    this.ignoredLinks = [];
    this.images = [];
    this.settings = settings;
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    this.container = container;
    container.empty();
    this.toolbar = container.createEl("div");
    this.generatePreviewParent = this.toolbar.createEl("span");
    this.generateMarkdownParent = this.toolbar.createEl("span");
    this.generateSlidesParent = this.toolbar.createEl("span");
    this.structure = this.container.createEl("div");
    new Button(this.generatePreviewParent, "Generate preview", () => {
      this.linksTree = [];
      this.maxLevel = 0;
      this.processed = [];
      this.mainNameLinks = [];
      this.ignoredLinks = [];
      this.markdown = "";
      this.structure.empty();
      this.generateMarkdownParent.empty();
      this.generateSlidesParent.empty();
      this.readSelectedNote();
    });
  }
  parseLinks(text, index = false) {
    const links = text.matchAll(/\[\[(.*?)\]\]/g);
    let cleanLinks = [...links].map((l) => l[1]);
    cleanLinks = [...new Set(cleanLinks)];
    cleanLinks = cleanLinks.filter((cl) => !cl.startsWith("#"));
    cleanLinks = cleanLinks.filter((cl) => !cl.startsWith(`${this.settings.literatureNote}#`));
    const existingNotes = cleanLinks.map((cl) => {
      cl = fixSpaceInName(cl);
      if (!!_GenerateMarkdown.imageTypes.filter((it) => cl.includes(it.toLowerCase())).length) {
        this.images.push(cl);
        return false;
      }
      let isInline = true;
      if (text.includes(this.settings.listOfLinksKeyword)) {
        let [inlineText, linksText] = text.split(this.settings.listOfLinksKeyword);
        if (!inlineText.includes(cl))
          isInline = false;
      }
      let isIndex = false;
      if (index) {
        isInline = false;
        isIndex = true;
      }
      const note = this.loadedFiles.find((f) => f["basename"] === cl);
      return {
        name: cl,
        exists: !!note,
        inline: isInline,
        index: isIndex,
        path: note == null ? void 0 : note.path
      };
    }).filter(Boolean);
    return existingNotes;
  }
  async readSelectedNote() {
    this.loadedFiles = app.vault.getMarkdownFiles();
    const activeNote = this.app.workspace.getActiveFile();
    if (!activeNote) {
      new import_obsidian4.Notice(`Selected note is invalid.`);
      throw new Error("Selected note is invalid.");
    }
    const activeNoteText = await getNoteByName(this.app, activeNote.path);
    const mainContentLinks = this.parseLinks(activeNoteText, true);
    this.mainNameLinks = mainContentLinks.map((l) => l.name);
    this.linksTree = await this.generateNotesHierarchy(mainContentLinks);
    const title = activeNote.basename;
    new BaseLink(this.app, this.structure, title);
    new TreeMenu(this.app, this.structure, this.linksTree, (ignoredLinks) => {
      this.ignoredLinks = ignoredLinks;
    });
    new Button(this.generateMarkdownParent, "Generate markdown", () => {
      this.markdown = "";
      this.generateMarkdownFile(this.linksTree, activeNoteText);
    }, { cls: "generate-markdown-btn" });
    new Button(this.generateSlidesParent, "Generate slideshow", () => {
      new SlidesModal(this.app, this.linksTree, this.ignoredLinks, (slides, hasTitleSlide, hasLastSlide) => {
        const slidesMD = new SlidesMarkdown(slides, title, hasTitleSlide, hasLastSlide);
        new SaveModal(this.app, async (fileName) => {
          await this.app.vault.adapter.write(`${fileName}.md`, slidesMD.slideshow);
          new import_obsidian4.Notice(`Slideshow ${fileName} created successfully`);
          this.app.workspace.openLinkText(`${fileName}.md`, "");
        }).open();
      }).open();
    }, { cls: "generate-markdown-btn" });
  }
  generateMarkdownFile(links, mainNote) {
    this.composeMarkdown(links);
    this.mainNameLinks.forEach((mnl) => {
      mnl = fixSpaceInName(mnl);
      mainNote = mainNote.replaceAll(`[[${mnl}]]`, `[[#${mnl}]]`);
    });
    this.markdown = mainNote + this.markdown;
    new SaveModal(this.app, async (fileName) => {
      await this.app.vault.adapter.write(`${fileName}.md`, this.markdown);
      new import_obsidian4.Notice(`Note ${fileName} created successfully`);
      this.app.workspace.openLinkText(`${fileName}.md`, "");
    }).open();
  }
  composeMarkdown(links) {
    links.forEach(async (link) => {
      let note = await getNoteByName(this.app, link.path);
      const localLinks = this.parseLinks(note);
      if (this.ignoredLinks.includes(link.name))
        return;
      note = note.trim();
      if (note.length == 0)
        return;
      localLinks.forEach((localLink) => {
        if (localLink.inline && this.ignoredLinks.includes(localLink.name))
          note = note.replaceAll(`[[${localLink.name}]]`, localLink.name);
        else
          note = note.replaceAll(`[[${localLink.name}]]`, `[[#${localLink.name}]]`);
      });
      let noteRows = note.split("\n");
      let firstRow = fixSpaceInName(noteRows[0]);
      if (firstRow.includes(`# ${link.name}`)) {
        noteRows.shift();
        note = noteRows.join("\n").trim();
      }
      if (note.includes(this.settings.listOfLinksKeyword)) {
        let [importantPart, endPart] = note.split(this.settings.listOfLinksKeyword);
        note = importantPart.trim();
      }
      let title = "";
      if (link.inline) {
        title = `##### ${link.name}`;
      } else {
        const nestedLevel = Array(link.level).fill("#").join("");
        title = `${nestedLevel} ${link.name}`;
      }
      note = `

${title}
${note}`;
      this.markdown += note;
      if ("children" in link)
        this.composeMarkdown(link.children);
    });
  }
  async generateNotesHierarchy(links) {
    const linksObj = await this.dfs(links, 0, []);
    let linksArr = [];
    Object.keys(linksObj).forEach((key) => {
      var _a, _b;
      const { parentRef, ...rest } = linksObj[key];
      linksArr.push({ ...rest, parent: (_b = (_a = linksObj[key]) == null ? void 0 : _a.parentRef) == null ? void 0 : _b.name });
    });
    const getNestedChildren = (arr, parent) => {
      let children = [];
      for (let i = 0; i < arr.length; i++) {
        if (arr[i].parent == parent) {
          const grandChildren = getNestedChildren(arr, arr[i].name);
          if (grandChildren.length) {
            arr[i].children = grandChildren;
          }
          children.push(arr[i]);
        }
      }
      return children;
    };
    return getNestedChildren(linksArr, void 0);
  }
  async dfs(links, level, processed, parentRef, titleMapping) {
    titleMapping = titleMapping != null ? titleMapping : {};
    for await (const [order, link] of links.entries()) {
      if (this.mainNameLinks.includes(link.name) && level != 0)
        continue;
      if (processed.includes(link.name)) {
        continue;
      }
      processed.push(link.name);
      const note = await getNoteByName(this.app, link.path);
      const subLinks = this.parseLinks(note);
      this.maxLevel = level + 1;
      titleMapping[link.name] = { ...link, parentRef, level: this.maxLevel, order };
      if (links.length > 0)
        await this.dfs(subLinks, this.maxLevel, processed, titleMapping[link.name], titleMapping);
    }
    return titleMapping;
  }
  async onClose() {
  }
  getViewType() {
    return VIEW_CONTENT_COMPOSE_NOTES;
  }
  getDisplayText() {
    return "Notes Merger";
  }
};
var GenerateMarkdown = _GenerateMarkdown;
GenerateMarkdown.imageTypes = ["jpg", "jpeg", "png", "gif", "webp", "tiff", "bmp"].map((it) => `.${it}`);

// main.ts
var DEFAULT_SETTINGS = {
  listOfLinksKeyword: "Kam d\xE1l",
  literatureNote: "Literature"
};
var GenerateMarkdownPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GenerateMarkdownPluginSettingTab(this.app, this));
    this.registerView(VIEW_CONTENT_COMPOSE_NOTES, (leaf) => new GenerateMarkdown(leaf, this.settings));
    this.addRibbonIcon("scroll", "NotesMerger", () => {
      this.activateGenerateMarkdownView();
    });
  }
  async activateGenerateMarkdownView() {
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_CONTENT_COMPOSE_NOTES,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_CONTENT_COMPOSE_NOTES)[0]);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var GenerateMarkdownPluginSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("List of links keyword").setDesc("Keyword to detect list of links at the end of note").addText((text) => text.setPlaceholder('Defaults to "Kam d\xE1l"').setValue(this.plugin.settings.listOfLinksKeyword).onChange(async (value) => {
      this.plugin.settings.listOfLinksKeyword = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Literature note").setDesc("Name of note with citations").addText((text) => text.setPlaceholder('Defaults to "Literature"').setValue(this.plugin.settings.literatureNote).onChange(async (value) => {
      this.plugin.settings.literatureNote = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
