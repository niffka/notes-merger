/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GenerateMarkdownPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/views/generate-markdown.ts
var import_obsidian2 = require("obsidian");

// src/utils.ts
var import_fs = require("fs");
var fixSpaceInName = (name) => {
  return name.replace(/[\u00A0\u1680\u180E\u2000-\u200B\u202F\u205F\u3000\uFEFF]/, " ").trim();
};
var getNoteByName = (name, loadedFiles) => {
  const loadedFile = loadedFiles.find((file) => file.basename === name);
  const fullPath = app.vault.adapter.getFullPath(name);
  if (!loadedFile)
    return "";
  const absolutePath = fullPath.replace(name, loadedFile.path.replace("/", "\\"));
  const note = (0, import_fs.readFileSync)(absolutePath, { encoding: "utf8" });
  return note;
};

// src/components/Button.ts
var Button = class {
  constructor(element, text, onClick, args) {
    this.btn = element.createEl("button", { text, ...args });
    this.btn.onclick = () => {
      onClick(this);
    };
    return this;
  }
};

// src/components/Link.ts
var BaseLink = class {
  constructor(context, element, name) {
    this.context = context;
    this.element = element;
    this.name = name;
    this.render();
  }
  render() {
    const hrefTitle = this.element.createEl("a", { text: this.name, cls: "cont__title" });
    hrefTitle.onclick = () => {
      this.context.workspace.openLinkText(this.name, "");
    };
  }
};
var Link = class {
  constructor(context, element, link, renderNow = true) {
    this.toggledState = false;
    this.link = link;
    this.context = context;
    this.element = element;
    if (renderNow)
      this.render(false);
    return this;
  }
  render(state) {
    this.a = this.element.createEl("a", { text: this.link.name, cls: "link" });
    !this.link.exists && this.a.addClass("cont__link-not-exist");
    this.link.inline && this.a.addClass("inline");
    this.a.onclick = () => {
      this.context.workspace.openLinkText(this.link.name, "");
      !this.link.exists && this.a.removeClass("cont__link-not-exist");
    };
    this.toggle(state);
  }
  toggle(state) {
    if (state)
      this.a.removeClass("strikethrough");
    else
      this.a.addClass("strikethrough");
  }
};

// src/components/SaveModal.ts
var import_obsidian = require("obsidian");
var SaveModal = class extends import_obsidian.Modal {
  constructor(app2, onSubmit) {
    super(app2);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Save as" });
    new import_obsidian.Setting(contentEl).setName("File name: ").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Generate markdown note").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/components/TreeMenu.ts
function flattenChildren(link, children) {
  if ("children" in link) {
    const childrenLinkNames = link.children.map((l) => l.name);
    children.push(...childrenLinkNames);
    link.children.forEach((l) => {
      flattenChildren(l, children);
    });
  }
  return children;
}
var TreeMenu = class {
  constructor(app2, structure, linksTree, event) {
    this.ignoredLinks = [];
    this.linksTree = [];
    this.app = app2;
    let menu = structure.createEl("div", { cls: "tree-menu" });
    this.UL = menu.createEl("ul");
    this.linksTree = linksTree;
    this.render(this.linksTree, this.UL, [], event);
  }
  render(links, menuEl, childrenLinks, event) {
    if (!childrenLinks)
      childrenLinks = [];
    links.forEach((link) => {
      const li = menuEl.createEl("li");
      const linkEl = new Link(this.app, li, link, false);
      let state = !childrenLinks.includes(linkEl.link.name);
      if (!link.exists)
        state = false;
      new Checkbox(li, state, link.exists, () => {
        const children = [linkEl.link.name, ...flattenChildren(linkEl.link, [])];
        console.log("flatten", children);
        if (state == false) {
          childrenLinks = childrenLinks.filter((cl) => !children.includes(cl));
        } else {
          childrenLinks.push(...children);
          childrenLinks = [...new Set(childrenLinks)];
        }
        this.ignoredLinks = childrenLinks;
        this.UL.empty();
        this.render(this.linksTree, this.UL, childrenLinks, event);
      });
      linkEl.render(state);
      if ("children" in link) {
        const ul = li.createEl("ul");
        this.render(link.children, ul, childrenLinks, event);
      }
    });
    return event(this.ignoredLinks);
  }
};

// src/components/Checkbox.ts
var Checkbox = class {
  constructor(element, state, exists, onClick) {
    this.cb = element.createEl("input", {
      type: "checkbox",
      cls: "checkbox-btn"
    });
    this.cb.checked = state;
    if (!exists) {
      this.cb.disabled = true;
      this.cb.checked = false;
      this.cb.addClass("checkbox-btn-disabled");
    }
    this.cb.onclick = () => {
      onClick(this);
    };
    return this;
  }
};

// src/views/generate-markdown.ts
var VIEW_CONTENT_COMPOSE_NOTES = "view-generate-markdown";
var _GenerateMarkdown = class extends import_obsidian2.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.linksTree = [];
    this.loadedFiles = [];
    this.maxLevel = 0;
    this.processed = [];
    this.mainNameLinks = [];
    this.markdown = "";
    this.ignoredLinks = [];
    this.images = [];
    this.settings = settings;
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    this.container = container;
    container.empty();
    this.toolbar = container.createEl("div");
    this.generatePreviewParent = this.toolbar.createEl("span");
    this.generateMarkdownParent = this.toolbar.createEl("span");
    this.structure = this.container.createEl("div");
    new Button(this.generatePreviewParent, "Generate preview", () => {
      this.linksTree = [];
      this.maxLevel = 0;
      this.processed = [];
      this.mainNameLinks = [];
      this.ignoredLinks = [];
      this.markdown = "";
      this.structure.empty();
      this.generateMarkdownParent.empty();
      this.readSelectedNote();
    });
  }
  parseLinks(text, index = false) {
    const links = text.matchAll(/\[\[(.*?)\]\]/g);
    let cleanLinks = [...links].map((l) => l[1]);
    cleanLinks = [...new Set(cleanLinks)];
    cleanLinks = cleanLinks.filter((cl) => !cl.startsWith("#"));
    const existingNotes = cleanLinks.map((cl) => {
      cl = fixSpaceInName(cl);
      if (!!_GenerateMarkdown.imageTypes.filter((it) => cl.includes(it.toLowerCase())).length) {
        this.images.push(cl);
        return false;
      }
      let isInline = true;
      if (text.includes(this.settings.listOfLinksKeyword)) {
        let [inlineText, linksText] = text.split(this.settings.listOfLinksKeyword);
        if (!inlineText.includes(cl))
          isInline = false;
      }
      let isIndex = false;
      if (index) {
        isInline = false;
        isIndex = true;
      }
      const note = this.loadedFiles.find((f) => f["basename"] === cl);
      return {
        name: cl,
        exists: !!note,
        inline: isInline,
        index: isIndex
      };
    }).filter(Boolean);
    return existingNotes;
  }
  readSelectedNote() {
    this.loadedFiles = app.vault.getAllLoadedFiles();
    const activeNote = this.app.workspace.getActiveFile();
    if (!activeNote) {
      new import_obsidian2.Notice(`Selected note is invalid.`);
      throw new Error("Selected note is invalid.");
    }
    const activeNoteText = getNoteByName(activeNote.basename, this.loadedFiles);
    const mainContentLinks = this.parseLinks(activeNoteText, true);
    this.mainNameLinks = mainContentLinks.map((l) => l.name);
    this.linksTree = this.generateNotesHierarchy(mainContentLinks);
    const title = activeNote.basename;
    new BaseLink(this.app, this.structure, title);
    new TreeMenu(this.app, this.structure, this.linksTree, (ignoredLinks) => {
      this.ignoredLinks = ignoredLinks;
    });
    new Button(this.generateMarkdownParent, "Generate markdown", () => {
      this.markdown = "";
      this.generateMarkdownFile(this.linksTree, activeNoteText);
    }, { cls: "generate-markdown-btn" });
  }
  generateMarkdownFile(links, mainNote) {
    this.composeMarkdown(links);
    this.mainNameLinks.forEach((mnl) => {
      mainNote = mainNote.replaceAll(`[[${mnl}]]`, `[[#${mnl}]]`);
    });
    this.markdown = mainNote + this.markdown;
    new SaveModal(this.app, (fileName) => {
      this.app.vault.adapter.write(`${fileName}.md`, this.markdown).then(() => {
        new import_obsidian2.Notice(`Note ${fileName} created successfully`);
        this.app.workspace.openLinkText(`${fileName}.md`, "");
      });
    }).open();
  }
  composeMarkdown(links) {
    links.forEach((link) => {
      let note = getNoteByName(link.name, this.loadedFiles);
      const localLinks = this.parseLinks(note);
      if (this.ignoredLinks.includes(link.name))
        return;
      note = note.trim();
      if (note.length == 0)
        return;
      localLinks.forEach((localLink) => {
        if (localLink.inline && this.ignoredLinks.includes(localLink.name))
          note = note.replaceAll(`[[${localLink.name}]]`, localLink.name);
        else
          note = note.replaceAll(`[[${localLink.name}]]`, `[[#${localLink.name}]]`);
      });
      let noteRows = note.split("\n");
      let firstRow = fixSpaceInName(noteRows[0]);
      if (firstRow.includes(`# ${link.name}`)) {
        noteRows.shift();
        note = noteRows.join("\n").trim();
      }
      noteRows = note.split("\n");
      note = noteRows.map((noteRow) => {
        const match = noteRow.match(/# (\w+)/);
        if (match)
          return `**${match[1]}**`;
        return noteRow;
      }).join("\n");
      if (note.includes(this.settings.listOfLinksKeyword)) {
        let [importantPart, endPart] = note.split(this.settings.listOfLinksKeyword);
        note = importantPart.trim();
      }
      let title = "";
      if (link.inline) {
        title = `##### ${link.name}`;
      } else {
        const nestedLevel = Array(link.level).fill("#").join("");
        title = `${nestedLevel} ${link.name}`;
      }
      note = `

${title}
${note}`;
      this.markdown += note;
      if ("children" in link)
        this.composeMarkdown(link.children);
    });
  }
  dfs(links, level, parentRef, titleMapping) {
    titleMapping = titleMapping != null ? titleMapping : {};
    links.forEach((link, order) => {
      if (this.mainNameLinks.includes(link.name) && level != 0)
        return;
      if (this.processed.includes(link.name))
        return;
      this.processed.push(link.name);
      const note = getNoteByName(link.name, this.loadedFiles);
      const subLinks = this.parseLinks(note);
      this.maxLevel = level + 1;
      titleMapping[link.name] = { ...link, parentRef, level: this.maxLevel, order };
      if (subLinks.length > 0) {
        this.dfs(subLinks, this.maxLevel, titleMapping[link.name], titleMapping);
      }
    });
    return titleMapping;
  }
  generateNotesHierarchy(links) {
    const linksObj = this.dfs(links, 0);
    console.log("linkobj", linksObj);
    let linksArr = [];
    Object.keys(linksObj).forEach((key) => {
      var _a, _b;
      const { parentRef, ...rest } = linksObj[key];
      linksArr.push({ ...rest, parent: (_b = (_a = linksObj[key]) == null ? void 0 : _a.parentRef) == null ? void 0 : _b.name });
    });
    console.log("LA", linksArr);
    let maxDepth = Number(this.settings.slidesDepth);
    function getChildren(parent) {
      console.log("depth", startDepth);
      let children = linksArr.filter((child) => child.parent === parent.name);
      console.log("children", children);
      if (startDepth <= maxDepth) {
        children.forEach((child) => {
          slidesList += "\n" + "#".repeat(startDepth) + child.name;
          if (startDepth != maxDepth) {
            startDepth += 1;
            getChildren(child);
          } else {
            console.log("\u010Daau");
            return;
          }
          startDepth -= 1;
        });
      }
    }
    let slidesList = "";
    let slides = linksArr.filter((link) => link.level === 1);
    console.log("SLIDES", slides);
    let startDepth;
    slides.forEach((slide) => {
      startDepth = 2;
      slidesList += "\n #" + slide.name;
      getChildren(slide);
    });
    console.log("slideList", slidesList);
    const createChildrenFromParent = (arr, parent) => {
      let childrenArr = [];
      for (let i = 0; i < arr.length; i++) {
        if (arr[i].parent == parent) {
          const children = createChildrenFromParent(arr, arr[i].name);
          if (children.length) {
            arr[i].children = children;
          }
          childrenArr.push(arr[i]);
        }
      }
      return childrenArr;
    };
    return createChildrenFromParent(linksArr, void 0);
  }
  async onClose() {
  }
  getViewType() {
    return VIEW_CONTENT_COMPOSE_NOTES;
  }
  getDisplayText() {
    return "Notes Merger";
  }
};
var GenerateMarkdown = _GenerateMarkdown;
GenerateMarkdown.imageTypes = ["jpg", "jpeg", "png", "gif", "webp", "tiff", "bmp"].map((it) => `.${it}`);

// main.ts
var DEFAULT_SETTINGS = {
  listOfLinksKeyword: "Kam d\xE1l",
  literatureNote: "Literature",
  slidesDepth: "2"
};
var GenerateMarkdownPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GenerateMarkdownPluginSettingTab(this.app, this));
    this.registerView(VIEW_CONTENT_COMPOSE_NOTES, (leaf) => new GenerateMarkdown(leaf, this.settings));
    this.addRibbonIcon("scroll", "NotesMerger", () => {
      this.activateGenerateMarkdownView();
    });
  }
  async activateGenerateMarkdownView() {
    this.app.workspace.detachLeavesOfType(VIEW_CONTENT_COMPOSE_NOTES);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_CONTENT_COMPOSE_NOTES,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_CONTENT_COMPOSE_NOTES)[0]);
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_CONTENT_COMPOSE_NOTES);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var GenerateMarkdownPluginSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings" });
    new import_obsidian3.Setting(containerEl).setName("List of links keyword").setDesc("Keyword to detect list of links at the end of note").addText((text) => text.setPlaceholder('Defaults to "Kam d\xE1l"').setValue(this.plugin.settings.listOfLinksKeyword).onChange(async (value) => {
      this.plugin.settings.listOfLinksKeyword = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Depth of slides").setDesc("How many layer are gonna be created into slides.").addText((text) => text.setPlaceholder("Default is 2 layers.").setValue(this.plugin.settings.slidesDepth).onChange(async (value) => {
      this.plugin.settings.slidesDepth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Literature note").setDesc("Name of note with citations").addText((text) => text.setPlaceholder('Defaults to "Literature"').setValue(this.plugin.settings.literatureNote).onChange(async (value) => {
      this.plugin.settings.literatureNote = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
